---
layout:     post
title:      "常用Linux命令，持续更新"
subtitle:   "不忘初心，方得始终"
date:       2017-9-18
author:     "mattmeng"
header-mask: 0.3
header-img: "img/in-post/Linux/Linux.jpg"
categories:
    - Linux 
catalog:    true
tags:
    - Linux
---


# <span style='color:red'>1.查看某个端口的占用情况</span>

    lsof -i :80
    kill -9 进程号 杀死进程

# <span style='color:red'>2.文件&文件夹
## 1.查询指定位置的文件
    find controller/ -name '*.js' | xargs grep 'decorator'  查询指定目录下 指定

## 2.删除 rm
### 1.递归删除所有
    rm -rf [file|folder]

    -f, --force    忽略不存在的文件，从不给出提示。
    -i, --interactive 进行交互式删除
    -r, -R, --recursive   指示rm将参数中列出的全部目录和子目录均递归地删除。
    -v, --verbose    详细显示进行的步骤
      	--help     显示此帮助信息并退出
      	--version  输出版本信息并退出

### 2.删除指定目录文件夹

    find path(路径) -name 名称|xargs rm -rf

## 3.操作文件&文件夹

    1. file 文件名
        可以查看文件类型;
    2. 或者:  more  文件名
        查看文件内容是否可读文本
    3. 修改权限
        chmod 777 文件名
        或者： chmod a+x 文件名
        如果没有权限， 需要文件属主或管理员用户（root）执行
    4.写入文件
        echo '123' > filename
    5.查看文件或者文件夹大小
        du -h fileName&path

    6.新建文件夹
        mkdir  文件夹名字
    7.新建文件
        touch 文件名称

    8.移动并重新命名
        mv matt.meng  ~/.ssh/id_rsa
        mv matt.meng ~/.ssh/id_rsa.pub
    9.修改文件/文件夹
        mv 修改前名字  修改后的

    10.copy文件夹、文件
        cp -R directory newDirectory


    11.rmdir用来删除空目录
        rmdir(选项)(参数)

        选项：
            -p或--parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除； --ignore-fail-on-non-empty：此选项使rmdir命令忽略由于删除非空目录时导致的错误信息； -v或-verboes：显示命令的详细执行过程； --help：显示命令的帮助信息； --version：显示命令的版本信息。

        参数：
            目录列表：要删除的空目录列表。当删除多个空目录时，目录名之间使用空格隔开。
        ex：
            rmdir /Desktop/null


    12.显示这个文件夹下的文件 并搜索名称为AuthorizedKeysFile文件

        cat /etc/ssh/sshd_config |grep AuthorizedKeysFile
        cat demo |grep a 搜索这个文件下面的a

    13.tree&&ls
        tree -L 1 显示一级目录
        ls -lh 查看文件大写
        ls -1 把文件或者文件夹排列成一列
        统计个数

        查看当前目录下的文件数量（不包含子目录中的文件）
        ls -l|grep "^-"| wc -l

        查看当前目录下的文件数量（包含子目录中的文件） 注意：R，代表子目录
        ls -lR|grep "^-"| wc -l

        查看当前目录下的文件夹目录个数（不包含子目录中的目录），同上述理，如果需要查看子目录的，加上R
        ls -l|grep "^d"| wc -l

        查询当前路径下的指定前缀名的目录下的所有文件数量
        例如：统计所有以“20161124”开头的目录下的全部文件数量
        ls -lR 20161124*/|grep "^-"| wc -l

    14.文件&文件夹权限

        1.查看以及用来更改某个目录活文件访问权限

            ### chmod 修改某个文件

            ls -l xxx.xx
            -rw-rw-r--
            其中：
                最前面那个 - 代表的是类型
                中间那三个 rw- 代表的是所有者（user）
                然后那三个 rw- 代表的是群组（group）
                最后那三个 r-- 代表的是其他人(other)

                r--read
                w--write
                x 文件可以被执行
                - 表示相应的权限还没有被赋予

            chmod o+w xxx.xx
            表示给其他人授予这个文件的权限

            chmod go-rw xxx.xx
            表示删除xxx.xx中的群组和其他人的读和写的权限。

                u 所有者
                g group
                o 代表其他人 但不是u和g
                a 代表全部的人 u g o
            数字代替
                -rw------- 600 只有所有者才有读写权限。
                -rw-r--r-- 644 只有所有者才有读写权限，组群和其他人只要读的权限。
                -rwx------ 700 只要所有者才有读写执行的权利
                -rwxr-xr-x 755 只有所有者才有读写执行的权利，组群和其他人只有读和执行的权限
                -rwx--x--x 711 只有所有者才有读，写，执行的权限，组群和其他人只有执行的权限
                -rw-rw-rw- 666 每个人都有读写的权限
                -rwxrwxrwx 777 每个人都有读写和执行的权限

        2.修改某个目录或文件的用户名和用户组的权限

            chown 用户名:组名 文件路径（绝对or相对）
            参数：
                -c 显示更改的部分信息
                -f 忽略错误信息
                -h 修复符号链接
                -R 处理指定目录以及其子目录下的所有文件
                -v 显示详细的处理信息
                -deference 作用与符号链接的指向，而不是链接文件本身。
    15.>> >
        >定向数据文件，如果文件不存在就创建文件，如果文件存在清空。
        >>将内容追加到目标文件。

# <span style='color:red'>3.pscp&scp</span>

## 1.利用pscp上传文件
        pscp d:\project\udpServer.zip root@101.201.30.9:/home

## 2.scp下载文件
        scp walle@52.80.63.5:/home/apps/sensor-tcp/tmp/fileName.txt 本地地址
        sudo echo ""  > hosts 清空hosts
## 3.scp 上传文件
        scp  -r /tmp/local_dir username@ip:remote_dir


# <span style='color:red'>4.查看相关命令的帮助文档</span>

    tldr 查看某个命令的help

# <span style='color:red'>5.打包/解压</span>

    tar -c创建包 -X释放包 -v显示命令过程 -z代表压缩包
    tar -cvf benet.tar /home/benet 把/home/benet目录打包
    tar -zcvf benet.tar /mnt 把目录打包并压缩
    tar -zxvf benet.tar.gz 压缩包的文件解压恢复
    tar -jxvf benet.tar.gz bz2解压缩
    unzip 解压文件

# <span style='color:red'>6.Linux 打开关闭防火墙（待补充）</span>

    service iptables statue

# <span style='color:red'>7.PATH</span>

    查看PATH值
        export
    问题：
        长时间没弄path会失效 所以会出现找不到的情况
    添加path
        vi /etc/profile
        在文档的最后，添加：
            export PATH="/usr/local/nginx:$PATH"
        保存，退出
            source /etc/profile
    程序自带的shell命令是从env中的PATH找到的
    uri：/usr/bin/env

# <span style='color:red'>8.查看内存CPU使用情况</span>


    top
    top -u process_name
    //退出q
    PID：进程的ID
    USER：进程所有者
    PR：进程的优先级别，越小越优先被执行
    NInice：值
    VIRT：进程占用的虚拟内存
    RES：进程占用的物理内存
    SHR：进程使用的共享内存
    S：进程的状态。
        S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数
    %CPU：进程占用CPU的使用率
    %MEM：进程使用的物理内存和总内存的百分比
    TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。
    COMMAND：进程启动命令名称

    Linux
        free 查看占用内存
　　
# <span style='color:red'>9.xargs</span>

    之所以用这个命令，关键是有很多的命令不知道管道传递参数。xargs命令。
    例如：
        find /sbin -perm + 700 |ls-1 //这是不对的
        find /sbin -perm + 700|xargs ls -1//这是对的

# <span style='color:red'>10.base64</span>

    echo '要转换的内容'|base64 (encoded，编码)

    echo 'aGVsbG8K'|base64 -D  (decoded,解码)

# <span style='color:red'>11. nc</span>

## 1.端口扫描
        nc -z -v -n 172.31.100.7 21-25
        可以运行在TCP或者UDP模式，默认是TCP，-u参数调整为udp.
        这个命令会打印21到25 所有开放的端口。Banner是一个文本，Banner是一个你连接的服务发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner。
        一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。
        -4 IPv4
        -6 IPv6
        -A 设置SO_RECV_ANYIF 给socket，除非要发送超级大的包的时候会用到。
        -a 设置SO_AWDL_UNRESTRICTED
        -b Bind socket to interface
        -c 发送CRLF作为结束符
        -C 不使用移动网络
        -D 启动debug模式
        -d 后台模式        -------------------------------（只windows下可用）
        -e prog 程序重定向，一旦连接，就执行 [危险!!]  (只windows下可用)
        -F Do not use flow advisory (flow adv enabled by default)
        -G 超时时间
        -h 帮助
        -H keepidle	Initial idle timeout in seconds
        -I keepintvl	Interval for repeating idle timeouts in seconds
        -i<延迟秒数>  设置时间间隔，以便传送信息及扫描通信端口。
        -J 重复超时的次数
        -k	保持多个链接
        -K Specify traffic class
        -l 监听模式，查看是否有错误。
        -L num_probes Number of probes to send before generating a read timeout event
        -m		Set SO_INTCOPROC_ALLOW on socket
        -n  直接使用IP地址，而不通过域名服务器。
        -M		Use MULTIPATH domain socket
        -N num_probes Number of probes to send before generating a write timeout event
        -O		Use old-style connect instead of connectx
        -p port 指定远程端口，但是不可以使用-l
        -r 随机远程端口
        -s addr		Local source address
        -t 使nc能够与telnet交互
        -U		Use UNIX domain socket
        -u 使用UDP传输协议。
        -v 详细输出--用两个-v可得到更详细的内容
        -w <超时秒数>  设置等待连线的时间。
        -X proto	Proxy protocol: "4", "5" (SOCKS) or "connect"
        -x addr[:port]	Specify proxy address and port
        -z  使用输入/输出模式，只在扫描通信端口时使用
        -o		Issue socket options after connect/bind
        --apple-delegate-pid pid	Set socket as delegate using pid

## 2.传输tcp包
        echo 'hello'|nc -n 127.0.0.1 5004
        回车继续发送tcp，请求

# <span style='color:red'>12.echo</span>

    功能说明：显示文字
    -n 不换行

# <span style='color:red'>13.alias</span>

    alias 快捷名字='要执行的命令'
    alias 快捷名字='要执行的命令'|'其他命令'
    # 传递参数 alias 不支持参数，但是可以提供一个function
    # $1 第一个参数 $2 第二个参数
        alias 快捷键名字='add(){
            git add app/controller app/dao app/router app/service;
            git commit -m $1;
        };add'
    # 取消别名
    unalias 别名名称

    zsh 增加别名
        vim ~/.zshrc
    bash 增加别名
        vim /etc/bashrc

# <span style='color:red'>14.curl</span>
[参考资料](http://www.cnblogs.com/duhuo/p/5695256.html)

    1.curl url 下载单个文件
    2.通过-o/-O选项保存下载的文件到指定文件中
        # 将文件下载到本地并命名为mygettext.html
        curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html
        # 将文件保存到本地并命名为gettext.html
        curl -O http://www.gnu.org/software/gettext/manual/gettext.html
        同时获取多个文件
        curl -o url -o url
    3.断点续传
        # 通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载
        curl -C - -O http://www.gnu.org/software/gettext/manual/gettext.html
    4.对curl进行网络限速、时间
    5.curl授权
        curl -u username:password URL
        # 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露
        curl -u username url

    6.从FTP服务器下载文件
        # 列出public_html下的所有文件夹和文件
        curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/

        # 下载xss.php文件
        curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/xss.php

    7.上传文件到FTP服务器

        通过 -T 选项可将指定的本地文件上传到FTP服务器上
        # 将myfile.txt文件上传到服务器
        curl -u ftpuser:ftppass -T myfile.txt ftp://ftp.testserver.com

        # 同时上传多个文件
        curl -u ftpuser:ftppass -T "{file1,file2}" ftp://ftp.testserver.com

        # 从标准输入获取内容保存到服务器指定的文件中
        curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/myfile_1.txt

    8.通过-v、-trace获取更多的链接信息

    9.通过字典查询单词
        # 查询bash单词的含义
        curl dict://dict.org/d:bash

        # 列出所有可用词典
        curl dict://dict.org/show:db

        # 在foldoc词典中查询bash单词的含义
        curl dict://dict.org/d:bash:foldoc
    10.curl设置代理
        # 指定代理主机和端口
        curl -x proxysever.test.com:3128 http://google.co.in

    11.保存与使用其他网站的cookie信息
        # 将网站的cookies信息保存到sugarcookies文件中
        curl -D sugarcookies http://localhost/sugarcrm/index.php
        # 使用上次保存的cookie信息
        curl -b sugarcookies http://localhost/sugarcrm/index.php

    12.传递请求参数
        默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据
        可以通过 --data/-d 方式指定使用POST方式传递数据
        # GET
        curl -u username https://api.github.com/user?access_token=XXXXXXXXXX

        # POST
        curl -u username --data "param1=value1&param2=value" https://api.github.com

        # 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端
        curl --data @filename https://github.api.com/authorizations

        # 如果特殊字符需要转义
            # 直接使用--data-urlencode会自动转义
            curl --data-urlencode "value 1" http://hostname.com

        # 除了GET、POST，还可以通过-X指定请求方式。
            curl -I -X DELETE https://api.github.com
            # 上传文件
            curl --form "fileupload=@filename.txt" http://hostname/resource

# <span style='color:red'>15.查看socket连接数</span>

    ulimit -n
    修改socket连接数
        sudo vim /etc/security/limits.conf
        * soft nofile 65535
        * hard nofile 65535

# <span style='color:red'>16.执行脚本的四种方法</span>

    1.  ./脚本.sh
    2.使用全路径执行 /Users/mengxiangcun/semioe/private/tool/hello.sh
    3.直接使用bash or sh来执行
        bash hello.sh
        sh hello.sh
    4.在当前环境执行shell脚本。
        . ./hello.sh
        source hello.sh

>区别

    1、.sh文件
        .sh为Linux的脚本文件，可以通过.sh执行一些命令，可以理解为windows的bat的批处理文件。

    二、.命令
        .命令和source是同一命令。
    三、sh/base/source/. 执行.sh文件的区别

        #!/bin/bash
        pidstat -d  1 > pidstat.txt

        假如有一个脚本test.sh
            echo "step 1 sleeping"
            sleep 200
            echo "step 2 sleeping"
            sleep 200

            1、./test.sh

            2、sh test.sh/bash test.sh

            3、. test.sh

            4、source test.sh
        区别是：
            第一种需要x权限，才能执行。如果中途停止，下面的不会执行。

            第二种是新建一个shell执行test.sh脚本里面的命令，不需要执行权限，有r 读取权限即可，有两个进程在运行，一个是bash，一个是sleep。如果中途终止，下面不会执行。
            提示:bash，是sh的加强版，sh相当于是bash的子集，效果基本一致。

            第三种只需要r 读取权限，不需要执行权限，只有一个新进程在运行sleep，如果终止会接着执行，直到结束。

            第四种和第三种一致。

# <span style='color:red'>17.后台运行</span>

    只要在要执行的命令后面加上&就可以。

# <span style='color:red'>18.sudo</span>

    切换用户名：
        su 用户名

# <span style='color:red'>19.nl</span>

    nl用于计算文件中的行号。nl可以将输出的内容自动加上行号，其可以将行号做比较多的显示设计，包括位数和是否自动补0等等的功能。

    nl[选项]...[文件]...

>参数

    -b：指定行号的显示方式
        -b a 空行显示行号
        -b t 空行不显示行号
    -n:列出行号表示的方法
        -n ln 行号在屏幕的左方显示
        -n rn 行号在屏幕的右方显示不加0
        -n rz 行号在屏幕的左方显示加0
    -w:行号栏的占用的位数
    -p:在逻辑定界符不重新开始计算

    nl file.log 列出文件的内容，空行没有行号
    nl -b a -n rz 自动补0统一输出格式

    nl -b a -n rz 命令行号默认为六位，要调整位数可以加上参数 -w 3 调整为3位。

# <span style='color:red'>20.查看某个进程</span>

    ps -mp <pid>

# <span style='color:red'>21.soure</span>

    source ~/.zshrc 使文件立马生效

# <span style='color:red'>22.读取用户键入的值</span>

    echo '请输入:'
    read input
    echo '输入的值为$input'

# <span style='color:red'>23.grep</span>

    grep 要搜索的内容 filePath

# <span style='color:red'>24.awk sed Perlre</span>

# <span style='color:red'>25.jq</span>

    echo '{"a":"1"}'|jq .
    cat xx.json|jq .

# <span style='color:red'>26.rename</span>

    重命名、批量重命名 支持正则表达式
    rename 's/$/.jpg/' * 把所有的文件后面加上.jpg

# <span style='color:red'>27.通过pid获取进程以及文件信息</span>

    ll /proc/PID
    cwd 进程
    exe 路径

# <span style='color:red'>28.监听IO&监听 io 内存 cpu</span>

    pidstat -d  1

    pidstat -u -r -d -t 1

# <span style='color:red'>29.更改文件的编码</span>

    iconv -f 更改前encoding -t 更改后encoding inputfile

# <span style='color:red'>30.date</span>

    date +%s
    获取时间戳 秒为单位

>如有侵权行为，请[点击这里](https://github.com/mattmengCooper/MattMeng_hexo/issues)联系我删除

[如发现疑问或者错误点击反馈](https://github.com/mattmengCooper/MattMeng_hexo/issues)
